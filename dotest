#!/usr/bin/env python
# Copyright 2013 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
import tempfile
import shutil
import os
import argparse
import schroot
import logging.config
import logging
import subprocess
import ConfigParser

from debian import changelog
from email.Utils import formatdate
from contextlib import contextmanager

try:
    from colorlog import ColoredFormatter
except ImportError:
    ColoredFormatter = None


logger = logging.getLogger(__name__)


def setup_logging():
    if ColoredFormatter is not None:
        formatter = ColoredFormatter(
            "\n%(log_color)s%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%m-%d %H:%M",
            reset=True,
            log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
            }
        )
    else:
        formatter = logging.Formatter(
            "\n%(asctime)s %(levelname)-8s "
            "%(message)s",
            datefmt="%m-%d %H:%M",
        )

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    console.setFormatter(formatter)

    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    root.addHandler(console)


interactive_env = {
    'PATH': '/usr/sbin:/usr/bin:/sbin:/bin',
    'DEBCONF_DEBUG': 'developer',
}

env = dict(interactive_env)
env.update({
    'DEBIAN_FRONTEND': 'noninteractive',
})


def call(cmd, **kwargs):
    logger.debug(" ".join(cmd))
    return subprocess.check_call(cmd, **kwargs)


@contextmanager
def temp_dir():
    tmp_dir = tempfile.mkdtemp()
    cur_dir = os.getcwd()

    try:
        yield tmp_dir
    finally:
        os.chdir(cur_dir)
        shutil.rmtree(tmp_dir)


@contextmanager
def chdir(directory):
    old_dir = os.getcwd()
    try:
        os.chdir(directory)
        yield old_dir
    finally:
        os.chdir(old_dir)


def generate_keys():
    if not os.path.isdir("keys"):
        os.mkdir("keys")

    if os.path.isfile("keys/secring.gpg") and \
            os.path.isfile("keys/pubring.gpg"):
        return

    with tempfile.NamedTemporaryFile() as f:
        f.write("Key-Type: RSA\n")
        f.write("Key-Length: 1024\n")
        f.write("Name-Real: Karaage Tester\n")
        f.write("Name-Email: karaage@lists.vpac.org\n")
        f.write("Expire-Date: 0\n")
        f.write("%%secring %s\n" % "keys/secring.gpg")
        f.write("%%pubring %s\n" % "keys/pubring.gpg")
        f.write("%commit\n")
        f.flush()
        call(["gpg", "--no-default-keyring", "--batch", "--gen-key", f.name])


def setup(chroot, tmp_dir, distribution, config):
    repo_dir = os.path.join(tmp_dir, "repo")

    chroot.check_call(
        ["chmod", "1777", "/dev/shm"], user='root')

    if not os.path.isdir(repo_dir):
        os.mkdir(repo_dir)

    make_debian_repo(chroot, tmp_dir, repo_dir)

    with chroot.create_file('/etc/apt/sources.list', user='root') as f:
        f.write(
            "deb file://%s ./\n" % (repo_dir))
        f.write(
            "deb %s %s main\n"
            % (config.get("debian", "main"), distribution))
        f.write(
            "deb http://code.vpac.org/debian/ %s main\n"
            % distribution)

    with chroot.create_file('/etc/apt/preferences', user='root') as f:
        f.write("Package: *\n")
        f.write("Pin: release l=VPAC\n")
        f.write("Pin-Priority: 510\n")
        f.write("\n")
        f.write("Package: *\n")
        f.write("Pin: origin ""\n")
        f.write("Pin-Priority: 520\n")
        f.write("\n")

    chroot.check_call(
        ["apt-key", "add", "vpac/vpac-debian-key.gpg"], user='root')
    chroot.check_call(
        ["apt-get", "update"], user='root')
    chroot.check_call(
        ["apt-get", "upgrade", "--yes"], user='root')
    chroot.check_call(
        [
            "apt-get", "install", "--yes",
            "build-essential", "git", "devscripts", "equivs",
        ], user='root')
    chroot.check_call(
        ["debconf-set-selections", "debconf.conf"], user='root')


def build_git_package(chroot, src, tmp_dir, dst_dir, name, branch="master"):
    dst_path = os.path.join(dst_dir, name)
    chroot.check_call(["git", "clone", "--branch", branch, src, dst_path])

    changelog_file = os.path.join(dst_path, "debian/changelog")
    cl = changelog.Changelog(open(changelog_file))
    version = cl.get_version()
    version = str(version) + "+git.1"

    cl.new_block(
        package=cl.package,
        version=version,
        distributions="UNRELEASED",
        urgency="low",
        author="Karaage Testing <karaage@lists.vpac.org>",
        date=formatdate(),
    )
    cl.add_change('')
    cl.add_change("  * Rebuild for Karaage testing. Not for production use.")
    cl.add_change('')
    cl.write_to_open_file(open(changelog_file, "w"))

    control_file = os.path.join(dst_path, "debian/control")

    depends_path = os.path.join(tmp_dir, "depends")
    os.mkdir(depends_path)
    with chdir(depends_path):
        chroot.check_call(["mk-build-deps", control_file], user="root")

    for name in os.listdir(depends_path):
        path = os.path.join(depends_path, name)
        if name.endswith(".deb"):
            chroot.check_call(["dpkg", "--unpack", path], user="root")
        chroot.check_call(["apt-get", "-f", "install", "--yes"], user="root")

    shutil.rmtree(depends_path)

    with chdir(dst_path):
        chroot.check_call(["dpkg-checkbuilddeps"])
        chroot.check_call(["fakeroot", "debian/rules", "binary"])


def make_debian_repo(chroot, tmp_dir, dst_dir):
    homedir = os.path.join(tmp_dir, "tmphome")
    release_file = os.path.join(dst_dir, "Release")

    logger.debug("making temp Debian repository at %s" % dst_dir)
    with tempfile.NamedTemporaryFile() as f:
        f.write('Dir {\n')
        f.write('   ArchiveDir "%s"\n' % dst_dir)
        f.write('}\n')
        f.write('Default {\n')
        f.write('    Packages::Compress ". gzip";\n')
        f.write('    Sources::Compress ". gzip";\n')
        f.write('}')
        f.write('BinDirectory "%s" {\n' % dst_dir)
        f.write('    Packages "Packages";\n')
        f.write('    Sources "Sources";\n')
        f.write('}\n')
        f.write('APT::FTPArchive::Release {\n')
        f.write('    Origin "karaage-test-archive";\n')
        f.write('    Label "karaage-test-archive";\n')
        f.write('    Suite "invalid";\n')
        f.write('    Codename "invalid";\n')
        f.write('    Description "Karaager test Temporary Archive";\n')
        f.write('}\n')
        f.flush()
        call(["apt-ftparchive", "generate", f.name])
        with open(release_file, 'w') as f2:
            call(
                ["apt-ftparchive", "-c", f.name, "release", dst_dir],
                stdout=f2)

    if not os.path.isdir(homedir):
        os.mkdir(homedir)

    call([
        "gpg", "--yes", "--no-default-keyring",
        "--homedir", homedir,
        "--secret-keyring", "keys/secring.gpg",
        "--keyring", "keys/pubring.gpg",
        "--default-key", "Karaage Tester",
        "-abs", "-o", release_file + ".gpg",
        release_file])

    chroot.check_call(["apt-key", "add", "keys/pubring.gpg"], user="root")


def copy_to_debian_repo(chroot, src_dir, dst_dir):
    for name in os.listdir(src_dir):
        if name.endswith(".deb"):
            src_file = os.path.join(src_dir, name)
            dst_file = os.path.join(dst_dir, name)
            logger.debug("copying %s to %s" % (src_file, dst_file))
            shutil.copyfile(src_file, dst_file)


def add_sources(chroot, tmp_dir, distribution, source, config):
    build_dir = os.path.join(tmp_dir, "build")
    repo_dir = os.path.join(tmp_dir, "repo")

    if not os.path.isdir(build_dir):
        os.mkdir(build_dir)

    if source is not None:
        section = "git-%s" % source
        options = config.options(section)
        for name in options:
            url = config.get(section, name)
            build_git_package(chroot, url, tmp_dir, build_dir, name)
            copy_to_debian_repo(chroot, build_dir, repo_dir)
            make_debian_repo(chroot, tmp_dir, repo_dir)
            chroot.check_call(["apt-get", "update"], user='root')


def install_mysql(chroot, sql_file, distribution):
    chroot.check_call(
        ["apt-get", "install", "--yes", "mysql-server",
            "python-mysql.connector", "python3-mysql.connector"],
        user='root')

    with chroot.create_file('/etc/mysql/conf.d/karaage.cnf', user='root') as f:
        f.write("[mysqld]\n")
        f.write("character_set_server = utf8\n")
        f.write("default-storage-engine = innodb\n")
        f.write("sql_mode = STRICT_ALL_TABLES\n")
#        f.write("innodb_log_buffer_size = 32M\n")
#        f.write("innodb_buffer_pool_size = 2G\n")
#        f.write("innodb_log_file_size = 768M\n")

        f.write("\n")
        f.write("[client]\n")
        f.write("default-character-set = utf8\n")

    chroot.check_call(["service", "mysql", "restart"], user='root')

    with open('mysql/setup.sql', 'r') as f:
        chroot.check_call(
            ["mysql", "--user=root", "--password=mysqlsecret"], stdin=f)

    if sql_file is not None:
        with open(sql_file, 'r') as f:
            chroot.check_call(
                ["mysql", "--user=root", "--password=mysqlsecret"], stdin=f)

    tables = chroot.check_output(
        ["mysql", "-B", "-N", "-e", "SHOW TABLES", "-pmysqlsecret", "karaage"],
        user='root')
    for table in tables.split("\n"):
        if table == "":
            continue
        sql = "SET foreign_key_checks = 0; ALTER TABLE %s " \
            "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" % table
        chroot.check_call(
            ["mysql", "-B", "-e", sql, "-pmysqlsecret", "karaage"],
            user='root')


def install_postgresql(chroot, sql_file, distribution):
    chroot.check_call(
        ["apt-get", "install", "--yes", "postgresql", "sudo",
            "python-psycopg2", "python3-psycopg2"],
        user='root')

    with open('postgresql/setup.sql', 'r') as f:
        chroot.check_call(
            ["sudo", "-u", "postgres", "/usr/bin/psql"],
            stdin=f, user="root")

    if sql_file is not None:
        with open(sql_file, 'r') as f:
            chroot.check_call(
                ["sudo", "-u", "postgres", "/usr/bin/psql"],
                stdin=f, user="root")


def install_openldap(chroot, ldif_file):
    chroot.check_call(
        ["apt-get", "install", "--yes", "slapd", "ldap-utils"],
        user='root')

    # load ppolicy schema
    logger.debug("Importing %s" % "openldap/ppolicy.ldif")
    with open('openldap/ppolicy.ldif', 'r') as f:
        chroot.check_call(
            ["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"],
            stdin=f, user='root')

    if ldif_file is None:

        # load ppolicy module
        logger.debug("Importing %s" % "openldap/ppolicy1.ldif")
        with open('openldap/ppolicy1.ldif', 'r') as f:
            chroot.check_call(
                ["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"],
                stdin=f, user='root')

        # load default ppolicy policy
        logger.debug("Importing %s" % "openldap/ppolicy2.ldif")
        with open('openldap/ppolicy2.ldif', 'r') as f:
            chroot.check_call(
                ["ldapadd", "-x", "-H", "ldapi:///",
                    "-D", "cn=admin,dc=example,dc=org", "-w", "slapdsecret"],
                stdin=f)

    else:

        # reconfigure base DN
        logger.debug("Importing %s" % ldif_file + '-config.ldif')
        with open(ldif_file + '-config.ldif', 'r') as f:
            chroot.check_call(
                ["ldapmodify", "-Y", "EXTERNAL", "-H", "ldapi:///"],
                stdin=f, user='root')

        # kill existing data
        chroot.check_call(["service", "slapd", "stop"], user='root')
        chroot.check_call(["rm", "-rf", "/var/lib/ldap/"], user='root')
        chroot.check_call(["mkdir", "/var/lib/ldap/"], user='root')
        logger.debug("Importing %s" % "/dev/null")
        with open('/dev/null', 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(
            ["chown", "openldap:openldap", "-R", "/var/lib/ldap/"],
            user='root')
        chroot.check_call(["service", "slapd", "start"], user='root')

        # load VPAC data
        chroot.check_call(["service", "slapd", "stop"], user='root')
        logger.debug("Importing %s" % ldif_file + '.ldif')
        with open(ldif_file + '.ldif', 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(
            ["chown", "openldap:openldap", "-R", "/var/lib/ldap/"],
            user='root')
        chroot.check_call(["service", "slapd", "start"], user='root')


def install_389(chroot, ldif_file):
    chroot.check_call(
        ["apt-get", "install", "--yes", "389-ds-base", "ldap-utils"],
        user='root')
    chroot.check_call(["setup-ds", "-s", "-f", "389/setup.inf"], user='root')


def install_karaage(chroot):
    chroot.check_call(
        [
            "apt-get", "install", "--yes",
            "libjs-jquery-ui", "csstidy", "slimit",
            "python-cracklib",
            "python-kgusage",
            "python3-cracklib",
        ],
        user='root')
    chroot.check_call(
        ["apt-get", "install", "--yes",
            "karaage3", "karaage3-celery"],
        user='root')


def config_karaage(chroot, database, ldap, karaage_file, distribution):
    with chroot.create_file('/etc/karaage3/settings.py', user='root') as f:
        with open("settings.py", "r") as src:
            shutil.copyfileobj(src, f)
        with open(karaage_file, "r") as src:
            shutil.copyfileobj(src, f)
        with open(os.path.join(database, "settings.py"), "r") as src:
            shutil.copyfileobj(src, f)
        if ldap != "none":
            with open(os.path.join(ldap, "settings.py"), "r") as src:
                shutil.copyfileobj(src, f)

    chroot.check_call(["kg_set_secret_key"], user='root')
    chroot.check_call(
        ["chmod", "a+r", "/etc/karaage3/settings.py"], user='root')

    chroot.check_call(
        ["kg-manage", "syncdb", "--noinput"], user='root')
    chroot.check_call(
        ["kg-manage", "migrate", "--all", "--traceback"], user='root')
    chroot.check_call(
        ["sed", "-i", "s/^\(LDAP_PEOPLE *= *\).*$/\\1True/",
            "/etc/karaage3/settings.py"], user='root')
    chroot.check_call(
        ["kg-manage", "migrate_ldap", "--traceback"], user='root')

    chroot.check_call(
        ["service", "apache2", "reload"], user='root')
    chroot.check_call(
        ["service", "karaage3-celery", "restart"], user='root')
    chroot.check_call(
        ["kg-manage", "kgcreatesuperuser",
            "--username=kgadmin", "--email=kgadmin@example.org",
            "--password=1234", "--short_name=karaage", "--full_name=admin",
            "--institute=test"],
        user='root')


def remove_karaage(chroot):
    chroot.check_call(
        ["apt-get", "remove", "--purge", "--yes",
            "karaage3"],
        user='root')
    chroot.check_call(
        ["apt-get", "autoremove", "--purge", "--yes"],
        user='root')


def test_karaage(chroot, tmp_dir, args):
    config = ConfigParser.ConfigParser()
    config.read(args.config)

    setup(chroot, tmp_dir, args.distribution, config)
    add_sources(chroot, tmp_dir, args.distribution, args.source, config)
    if args.database == "mysql":
        install_mysql(chroot, args.sql, args.distribution)
    elif args.database == "postgresql":
        install_postgresql(chroot, args.sql, args.distribution)
    else:
        raise RuntimeError("Unknown database server '%s'" % args.database)

    if args.ldap == 'openldap':
        install_openldap(chroot, args.ldif)
    elif args.ldap == '389':
        install_389(chroot, args.ldif)
    elif args.ldap == 'none':
        pass
    else:
        raise RuntimeError("Unknown ldap server '%s'" % args.ldap)
    karaage_file = args.karaage or "site_settings.py"
    install_karaage(chroot)
    config_karaage(
        chroot, args.database, args.ldap, karaage_file, args.distribution)
    if args.shell:
        print("")
        print("Configured. tmp_dir=%s" % tmp_dir)
        print("Entering shell, please exit to finish.")
        chroot.check_call(["bash"], user='root', env=interactive_env)
    if not args.keep:
        remove_karaage(chroot)


class Schroot(schroot.chroot.SchrootChroot):
    def _command(self, cmd, kwargs):
        kwargs["env"] = kwargs.pop("env", env)
        return super(Schroot, self)._command(cmd, kwargs)


class LocalRoot(Schroot):
    def _command_prefix(self, user, preserve_environment):
        command = []

        if user:
            command += ['sudo']
            command += ['-u', user]
            if preserve_environment:
                command += ['-E']
            command += ['--']

        return command

    def start(self, chroot_name):
        self.session = "localhost"
        self.active = True
        self.location = "/"

    def end(self):
        self.active = False


@contextmanager
def root(localhost, chroot_name):
    if localhost:
        ch = LocalRoot()
    else:
        ch = Schroot()
    try:
        ch.start(chroot_name)
        yield ch
    finally:
        ch.end()


def main():
    setup_logging()

    parser = argparse.ArgumentParser(
        description='Test karaage Debian packages.')
    parser.add_argument(
        "-d", "--distribution",
        choices=['squeeze', 'wheezy', 'sid'], default="wheezy",
        help="Which distribution?")
    parser.add_argument(
        "-a", "--architecture",
        choices=['i386', 'amd64'], default="amd64",
        help="Which architecture?")

    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument(
        "--chroot",
        help="Name of chroot to use. Default is distribution + architecture.")
    group.add_argument(
        "--localhost",
        action="store_true",
        help="Act on local system, not schroot (potentially dangerous)")

    parser.add_argument(
        "--database",
        choices=['mysql', 'postgresql'], default="mysql",
        help="Which database?")
    parser.add_argument(
        "-l", "--ldap",
        choices=['openldap', '389', 'none'], default="openldap",
        help="Which LDAP server?")
    parser.add_argument(
        "-c", "--config",
        default="dotest.ini",
        help="Where to get packages from")
    parser.add_argument(
        "-s", "--source",
        help="Where to get packages from")
    parser.add_argument(
        "-r", "--shell",
        action="store_true",
        help="Run shell on configured")
    parser.add_argument(
        "-e", "--error",
        action="store_true",
        help="Run shell on error")
    parser.add_argument(
        "-S", "--sql",
        help="Initialise mysql with this sql file")
    parser.add_argument(
        "-L", "--ldif",
        help="Initialise openldap with this file")
    parser.add_argument(
        "-k", "--karaage",
        help="Karaage config file to use")
    parser.add_argument(
        "--keep",
        action="store_true",
        help="Don't uninstall everything on completion")
    args = parser.parse_args()

    chroot_name = "%s-%s" % (
        args.chroot or args.distribution, args.architecture)

    generate_keys()

    with temp_dir() as tmp_dir:

        with root(args.localhost, chroot_name) as chroot:
            try:
                test_karaage(chroot, tmp_dir, args)
            except Exception, e:
                if args.error:
                    print("")
                    print("Exception occured. tmp_dir=%s" % tmp_dir)
                    print(e)
                    print("Entering shell, please exit to finish.")
                    chroot.check_call(
                        ["bash"], user='root', env=interactive_env)
                raise


if __name__ == "__main__":
    main()
