#!/usr/bin/env python
# Copyright 2013 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
import tempfile
import shutil
import os
import argparse
import schroot
import logging.config
import logging
import subprocess
import ConfigParser
import traceback

from contextlib import contextmanager

try:
    from colorlog import ColoredFormatter
except ImportError:
    ColoredFormatter = None


logger = logging.getLogger(__name__)


def setup_logging():
    if ColoredFormatter is not None:
        formatter = ColoredFormatter(
            "\n%(log_color)s%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%m-%d %H:%M",
            reset=True,
            log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
            }
        )
    else:
        formatter = logging.Formatter(
            "\n%(asctime)s %(levelname)-8s "
            "%(message)s",
            datefmt="%m-%d %H:%M",
        )

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    console.setFormatter(formatter)

    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    root.addHandler(console)


interactive_env = {
    'PATH': '/usr/sbin:/usr/bin:/sbin:/bin',
    'DEBCONF_DEBUG': 'developer',
}

env = dict(interactive_env)
env.update({
    'DEBIAN_FRONTEND': 'noninteractive',
})


def call(cmd, **kwargs):
    logger.debug(" ".join(cmd))
    return subprocess.check_call(cmd, **kwargs)


def generate_temp_password():
    length = 16
    chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    from os import urandom
    return "".join([chars[ord(c) % len(chars)] for c in urandom(length)])


def filter_file(settings, src_path, dst):
    with open(src_path, 'r') as src:
        for line in src:
            for key, value in settings.iteritems():
                line = line.replace("@" + key + "@", value)
            dst.write(line)


@contextmanager
def chdir(directory):
    old_dir = os.getcwd()
    try:
        os.chdir(directory)
        yield old_dir
    finally:
        os.chdir(old_dir)


def generate_keys():
    # these are generated locally and copied to schroot.
    if not os.path.isdir("keys"):
        os.mkdir("keys")

    if os.path.isfile("keys/secring.gpg") and \
            os.path.isfile("keys/pubring.gpg"):
        return

    with tempfile.NamedTemporaryFile() as f:
        f.write("Key-Type: RSA\n")
        f.write("Key-Length: 1024\n")
        f.write("Name-Real: Karaage Tester\n")
        f.write("Name-Email: karaage@lists.vpac.org\n")
        f.write("Expire-Date: 0\n")
        f.write("%%secring %s\n" % "keys/secring.gpg")
        f.write("%%pubring %s\n" % "keys/pubring.gpg")
        f.write("%commit\n")
        f.flush()
        call(["gpg", "--no-default-keyring", "--batch", "--gen-key", f.name])


def setup(chroot, tmp_dir, settings, distribution, config):
    repo_dir = os.path.join(tmp_dir, "repo")

    chroot.check_call(
        ["chmod", "1777", "/dev/shm"], user='root')

    make_debian_repo(chroot, tmp_dir, repo_dir)

    with chroot.create_file('/etc/apt/sources.list', user='root') as f:
        f.write(
            "deb file://%s ./\n" % (repo_dir))
        f.write(
            "deb %s %s main\n"
            % (config.get("debian", "main"), distribution))
        f.write(
            "deb http://code.vpac.org/debian/ %s main\n"
            % distribution)

    with chroot.create_file('/etc/apt/preferences', user='root') as f:
        f.write("Package: *\n")
        f.write("Pin: release l=VPAC\n")
        f.write("Pin-Priority: 510\n")
        f.write("\n")
        f.write("Package: *\n")
        f.write("Pin: origin ""\n")
        f.write("Pin-Priority: 520\n")
        f.write("\n")

    chroot.check_call(
        ["apt-key", "add", "vpac/vpac-debian-key.gpg"], user='root')
    chroot.check_call(
        ["apt-get", "update"], user='root')
    chroot.check_call(
        ["apt-get", "upgrade", "--yes"], user='root')

    with tempfile.TemporaryFile() as f:
        filter_file(settings, "debconf.conf", f)

        f.seek(0)

        chroot.check_call(
            ["debconf-set-selections"],
            stdin=f, user='root')


def make_debian_repo(chroot, tmp_dir, dst_dir):
    chroot.check_call(["mkdir", "-p", dst_dir], user="root")

    home_dir = os.path.join(tmp_dir, "tmphome")
    keys_dir = os.path.join(tmp_dir, "keys")

    chroot.check_call(["mkdir", "-p", home_dir], user="root")
    chroot.check_call(["mkdir", "-p", keys_dir], user="root")

    release_file = os.path.join(dst_dir, "Release")

    logger.debug("making temp Debian repository at %s" % dst_dir)
    path = os.path.join(tmp_dir, "apt-ftparchive.conf")
    with chroot.create_file(path, user='root') as f:
        f.write('Dir {\n')
        f.write('   ArchiveDir "%s"\n' % dst_dir)
        f.write('}\n')
        f.write('Default {\n')
        f.write('    Packages::Compress ". gzip";\n')
        f.write('    Sources::Compress ". gzip";\n')
        f.write('}')
        f.write('BinDirectory "%s" {\n' % dst_dir)
        f.write('    Packages "Packages";\n')
        f.write('    Sources "Sources";\n')
        f.write('}\n')
        f.write('APT::FTPArchive::Release {\n')
        f.write('    Origin "karaage-test-archive";\n')
        f.write('    Label "karaage-test-archive";\n')
        f.write('    Suite "invalid";\n')
        f.write('    Codename "invalid";\n')
        f.write('    Description "Karaager test Temporary Archive";\n')
        f.write('}\n')

    chroot.check_call(["apt-ftparchive", "generate", path], user="root")

    with chroot.create_file(release_file, user='root') as f:
        chroot.check_call(
            ["apt-ftparchive", "-c", path, "release", dst_dir],
            stdout=f, user="root")

    secring_path = os.path.join(keys_dir, "secring.gpg")
    pubring_path = os.path.join(keys_dir, "pubring.gpg")

    with chroot.create_file(secring_path, user='root') as f:
        with open("keys/secring.gpg", "r") as fsrc:
            shutil.copyfileobj(fsrc, f)

    with chroot.create_file(pubring_path, user='root') as f:
        with open("keys/pubring.gpg") as fsrc:
            shutil.copyfileobj(fsrc, f)

    chroot.check_call([
        "gpg", "--yes", "--no-default-keyring",
        "--homedir", home_dir,
        "--secret-keyring", secring_path,
        "--keyring", pubring_path,
        "--default-key", "Karaage Tester",
        "-abs", "-o", release_file + ".gpg",
        release_file], user="root")

    chroot.check_call(["apt-key", "add", "keys/pubring.gpg"], user="root")


def split_git_url(url):
    split = url.split(" ", 1)
    try:
        branch = split[1]
        if branch.startswith("-b"):
            branch = branch.split(" ", 1)[1]
        else:
            raise RuntimeError("Cannot parse URL: %s" % url)
    except IndexError:
        branch = "master"
    return (split[0], branch)


def add_sources(chroot, tmp_dir, distribution, source, config):
    build_dir = os.path.join(tmp_dir, "build")
    repo_dir = os.path.join(tmp_dir, "repo")

    chroot.check_call(["mkdir", "-p", build_dir], user="root")

    if source is not None:
        # create build environment
        chroot.check_call(
            [
                "apt-get", "install", "--yes",
                "build-essential", "git", "devscripts", "equivs", "quilt",
                "python-debian", "python3-debian",
            ], user='root')

        # copy build script
        path = os.path.join(tmp_dir, "build_pkg")
        with chroot.create_file(path, user='root') as f:
            with open("build_pkg") as fsrc:
                shutil.copyfileobj(fsrc, f)
        chroot.check_call(["chmod", "700", path], user="root")

        # build every package using build script
        section = "git-%s" % source
        options = config.options(section)
        for name in options:
            build_pkg_dir = os.path.join(build_dir, name)
            chroot.check_call(["mkdir", "-p", build_pkg_dir], user="root")

            url = config.get(section, name)
            url, branch = split_git_url(url)

            chroot.check_call([
                path,
                "--src", url,
                "--branch", branch,
                "--dir", build_pkg_dir,
                "--dst", repo_dir,
            ], user="root")

            make_debian_repo(chroot, tmp_dir, repo_dir)
            chroot.check_call(["apt-get", "update"], user='root')


def install_mysql(chroot, tmp_dir, settings, sql_file, distribution):
    chroot.check_call(
        ["apt-get", "install", "--yes", "mysql-server",
            "python-mysql.connector", "python3-mysql.connector"],
        user='root')

    with chroot.create_file('/etc/mysql/conf.d/karaage.cnf', user='root') as f:
        f.write("[mysqld]\n")
        f.write("character_set_server = utf8\n")
        f.write("default-storage-engine = innodb\n")
        f.write("sql_mode = STRICT_ALL_TABLES\n")
#        f.write("innodb_log_buffer_size = 32M\n")
#        f.write("innodb_buffer_pool_size = 2G\n")
#        f.write("innodb_log_file_size = 768M\n")

        f.write("\n")
        f.write("[client]\n")
        f.write("default-character-set = utf8\n")

    chroot.check_call(["service", "mysql", "restart"], user='root')

    password = "--password=%s" % settings['database_root_password']

    with tempfile.TemporaryFile() as f:
        filter_file(settings, "mysql/setup.sql", f)

        f.seek(0)

        chroot.check_call(
            ["mysql", "--user=root", password], stdin=f)

    if sql_file is not None:
        with open(sql_file, 'r') as f:
            chroot.check_call(
                ["mysql", "--user=root", password], stdin=f)

    tables = chroot.check_output(
        ["mysql", "-B", "-N", "-e", "SHOW TABLES", password, "karaage"],
        user='root')
    for table in tables.split("\n"):
        if table == "":
            continue
        sql = "SET foreign_key_checks = 0; ALTER TABLE %s " \
            "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" % table
        chroot.check_call(
            ["mysql", "-B", "-e", sql, password, "karaage"],
            user='root')


def install_postgresql(chroot, tmp_dir, settings, sql_file, distribution):
    chroot.check_call(
        ["apt-get", "install", "--yes", "postgresql", "sudo",
            "python-psycopg2", "python3-psycopg2"],
        user='root')

    with tempfile.TemporaryFile() as f:
        filter_file(settings, "postgresql/setup.sql", f)

        f.seek(0)

        chroot.check_call(
            ["sudo", "-u", "postgres", "/usr/bin/psql"],
            stdin=f, user="root")

    if sql_file is not None:
        with open(sql_file, 'r') as f:
            chroot.check_call(
                ["sudo", "-u", "postgres", "/usr/bin/psql"],
                stdin=f, user="root")


def install_openldap(chroot, tmp_dir, settings, ldif_file):
    chroot.check_call(
        ["apt-get", "install", "--yes", "slapd", "ldap-utils"],
        user='root')

    # load ppolicy schema
    logger.debug("Importing %s" % "openldap/ppolicy.ldif")
    with open('openldap/ppolicy.ldif', 'r') as f:
        chroot.check_call(
            ["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"],
            stdin=f, user='root')

    if ldif_file is None:

        # load ppolicy module
        logger.debug("Importing %s" % "openldap/ppolicy1.ldif")
        with open('openldap/ppolicy1.ldif', 'r') as f:
            chroot.check_call(
                ["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"],
                stdin=f, user='root')

        password = ['-w', settings['ldap_password']]

        # load default ppolicy policy
        logger.debug("Importing %s" % "openldap/dummy.ldif")
        with open('openldap/dummy.ldif', 'r') as f:
            chroot.check_call(
                ["ldapadd", "-x", "-H", "ldapi:///",
                    "-D", "cn=admin,dc=example,dc=org"] + password,
                stdin=f)

    else:

        base_name = os.path.splitext(ldif_file)[0]

        # reconfigure base DN
        logger.debug("Importing %s" % base_name + '-config.ldif')
        with open(base_name + '-config.ldif', 'r') as f:
            chroot.check_call(
                ["ldapmodify", "-Y", "EXTERNAL", "-H", "ldapi:///"],
                stdin=f, user='root')

        # stop server
        chroot.check_call(["service", "slapd", "stop"], user='root')

        # kill existing data
        chroot.check_call(["rm", "-rf", "/var/lib/ldap/"], user='root')
        chroot.check_call(["mkdir", "/var/lib/ldap/"], user='root')
        logger.debug("Importing %s" % "/dev/null")

        # load data
        logger.debug("Importing %s" % ldif_file)
        with open(ldif_file, 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')

        # index database
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(
            ["chown", "openldap:openldap", "-R", "/var/lib/ldap/"],
            user='root')

        # restart server
        chroot.check_call(["service", "slapd", "start"], user='root')


def install_389(chroot, tmp_dir, settings, ldif_file):
    path = os.path.join(tmp_dir, "ldap.inf")
    with chroot.create_file(path, user='root') as f:
        filter_file(settings, "389/setup.inf", f)

    chroot.check_call(
        ["apt-get", "install", "--yes", "389-ds-base", "ldap-utils"],
        user='root')
    chroot.check_call(
        ["setup-ds", "-s", "-f", path],
        user='root')

    if ldif_file is None:
        password = ['-w', settings['ldap_password']]

        # load default ppolicy policy
        logger.debug("Importing %s" % "389/dummy.ldif")
        with open('389/dummy.ldif', 'r') as f:
            chroot.check_call(
                ["ldapadd", "-x", "-H", "ldap://localhost/",
                    "-D", "cn=Directory Manager"] + password,
                stdin=f)

    else:
        raise RuntimeError("Import to 389 not implemented yet")


def install_karaage(chroot):
    chroot.check_call(
        [
            "apt-get", "install", "--yes",
            "libjs-jquery-ui", "csstidy", "slimit",
            "python-cracklib",
            "python-kgusage",
            "python3-cracklib",
            "python3-kgusage",
        ],
        user='root')
    chroot.check_call(
        ["apt-get", "install", "--yes",
            "karaage3", "karaage3-celery"],
        user='root')


def config_karaage(chroot, settings, args):

    database = args.database
    ldap = args.ldap
    south = args.south
    karaage_file = args.karaage or "site_settings.py"

    with chroot.create_file('/etc/karaage3/settings.py', user='root') as f:
        filter_file(settings, "settings.py", f)
        filter_file(settings, karaage_file, f)
        filter_file(settings, os.path.join(database, "settings.py"), f)
        if ldap != "none":
            filter_file(settings, os.path.join(ldap, "settings.py"), f)

    chroot.check_call(["kg_set_secret_key"], user='root')
    chroot.check_call(
        ["chmod", "a+r", "/etc/karaage3/settings.py"], user='root')

    if south:
        rc = chroot.call(["apt-cache", "show", "virtualenv"])
        if rc == 0:
            package = "virtualenv"
        elif rc == 100:
            package = "python-virtualenv"
        else:
            raise RuntimeError("Unexpected result for apt-cache of %d" % rc)

        chroot.check_call([
            "apt-get", "install", "--yes", package,
            ], user='root')

        chroot.check_call(["kg-migrate-south", "--traceback"], user='root')

    chroot.check_call(
        ["kg-manage", "syncdb", "--noinput"], user='root')
    chroot.check_call(
        ["kg-manage", "migrate", "--traceback"], user='root')
    chroot.check_call(
        ["kg-manage", "migrate_ldap", "--delete", "--traceback"], user='root')

    chroot.check_call(
        ["service", "apache2", "reload"], user='root')
    chroot.check_call(
        ["service", "karaage3-celery", "restart"], user='root')

    if args.create_superuser:
        chroot.check_call(
            ["kg-manage", "kgcreatesuperuser",
                "--username=kgadmin", "--email=kgadmin@example.org",
                "--password=1234", "--short_name=karaage", "--full_name=admin",
                "--institute=test"],
            user='root')


def remove_karaage(chroot):
    chroot.check_call(
        ["apt-get", "remove", "--purge", "--yes",
            "karaage3"],
        user='root')
    chroot.check_call(
        ["apt-get", "autoremove", "--purge", "--yes"],
        user='root')


def test_karaage(chroot, args):
    config = ConfigParser.ConfigParser()
    config.read(args.config)

    # create temp directory inside schroot.
    tmp_dir = "/var/lib/karaage-test/"
    chroot.check_call(["mkdir", "-p", tmp_dir], user="root")
    chroot.check_call(["chmod", "700", tmp_dir], user="root")

    settings = {
        'database_root_password': generate_temp_password(),
        'database_password': generate_temp_password(),
        'ldap_password': generate_temp_password(),
    }

    setup(chroot, tmp_dir, settings, args.distribution, config)
    add_sources(chroot, tmp_dir, args.distribution, args.source, config)
    if args.database == "mysql":
        install_mysql(
            chroot, tmp_dir, settings, args.sql, args.distribution)
    elif args.database == "postgresql":
        install_postgresql(
            chroot, tmp_dir, settings, args.sql, args.distribution)
    else:
        raise RuntimeError("Unknown database server '%s'" % args.database)

    if args.ldap == 'openldap':
        install_openldap(chroot, tmp_dir, settings, args.ldif)
    elif args.ldap == '389':
        install_389(chroot, tmp_dir, settings, args.ldif)
    elif args.ldap == 'none':
        pass
    else:
        raise RuntimeError("Unknown ldap server '%s'" % args.ldap)

    install_karaage(chroot)
    config_karaage(chroot, settings, args)

    if args.shell:
        print("")
        print("Configured. tmp_dir=%s" % tmp_dir)
        print("Entering shell, please exit to finish.")
        chroot.check_call(["bash"], user='root', env=interactive_env)
    if not args.keep:
        remove_karaage(chroot)


class Schroot(schroot.chroot.SchrootChroot):
    def _command(self, cmd, kwargs):
        kwargs["env"] = kwargs.pop("env", env)
        return super(Schroot, self)._command(cmd, kwargs)


class LocalRoot(Schroot):
    def _command_prefix(self, user, preserve_environment):
        command = []

        if user:
            command += ['sudo']
            command += ['-u', user]
            if preserve_environment:
                command += ['-E']
            command += ['--']

        return command

    def start(self, chroot_name):
        self.session = "localhost"
        self.active = True
        self.location = "/"

    def end(self):
        self.active = False


@contextmanager
def root(localhost, chroot_name):
    if localhost:
        ch = LocalRoot()
    else:
        ch = Schroot()
    try:
        ch.start(chroot_name)
        yield ch
    finally:
        ch.end()


def main():
    setup_logging()

    parser = argparse.ArgumentParser(
        description='Test karaage Debian packages.')
    parser.add_argument(
        "-d", "--distribution",
        choices=['squeeze', 'wheezy', 'sid'], default="wheezy",
        help="Which distribution?")
    parser.add_argument(
        "-a", "--architecture",
        choices=['i386', 'amd64'], default="amd64",
        help="Which architecture?")

    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument(
        "--chroot",
        help="Name of chroot to use. Default is distribution + architecture.")
    group.add_argument(
        "--localhost",
        action="store_true",
        help="Act on local system, not schroot (potentially dangerous)")

    parser.add_argument(
        "--database",
        choices=['mysql', 'postgresql'], default="mysql",
        help="Which database?")
    parser.add_argument(
        "-l", "--ldap",
        choices=['openldap', '389', 'none'], default="openldap",
        help="Which LDAP server?")
    parser.add_argument(
        "-c", "--config",
        default="dotest.ini",
        help="Where to get packages from")
    parser.add_argument(
        "-s", "--source",
        help="Where to get packages from")
    parser.add_argument(
        "-r", "--shell",
        action="store_true",
        help="Run shell on configured")
    parser.add_argument(
        "-e", "--error",
        action="store_true",
        help="Run shell on error")
    parser.add_argument(
        "--south",
        action="store_true",
        help="We need to run kg-migrate-south for South migrations.")
    parser.add_argument(
        "--create_superuser",
        action="store_true",
        help="We kgcreatesuperuser to create a super user.")
    parser.add_argument(
        "-S", "--sql",
        help="Initialise mysql with this sql file")
    parser.add_argument(
        "-L", "--ldif",
        help="Initialise openldap with this file")
    parser.add_argument(
        "-k", "--karaage",
        help="Karaage config file to use")
    parser.add_argument(
        "--keep",
        action="store_true",
        help="Don't uninstall everything on completion")
    args = parser.parse_args()

    chroot_name = "%s-%s" % (
        args.chroot or args.distribution, args.architecture)

    generate_keys()

    with root(args.localhost, chroot_name) as chroot:
        try:
            test_karaage(chroot, args)
        except Exception:
            if args.error:
                print("")
                print("Exception occured.")
                print("")
                traceback.print_exc()
                print("")
                print("Entering shell, please exit to finish.")
                chroot.check_call(
                    ["bash"], user='root', env=interactive_env)
            exit(1)


if __name__ == "__main__":
    main()
