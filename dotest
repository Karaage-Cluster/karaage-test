#!/usr/bin/python
import tempfile
import shutil
import subprocess
import os
import argparse

env = {
        'PATH': '/usr/sbin:/usr/bin:/sbin:/bin',
        'DEBCONF_DEBUG': 'developer',
}

def call(args, **kwargs):
    print
    print "---> ", args
    subprocess.check_call(args, env=env, **kwargs)


def setup():
    call(["apt-get", "update"])
    call(["apt-get", "upgrade", "--yes"])
    # python-support required for pysupport, should be replaced by python2 install method.
    call(["apt-get", "install", "--yes", "git", "build-essential", "debhelper", "cdbs", "python-support"])
    call(["debconf-set-selections", "debconf.conf"])


def build_git_package(src, name, branch="master"):
    old_dir = os.getcwd()
    try:
        call(["git", "clone", "--branch", branch, src, name])
        os.chdir(name)
        call(["dpkg-checkbuilddeps"])
        call(["fakeroot", "debian/rules", "binary"])
    finally:
        os.chdir(old_dir)


def add_sources(tmp_dir, distribution, source):
    if source == "local":
        old_dir = os.getcwd()
        try:
            os.chdir(tmp_dir)
            build_git_package("file:///home/brian/tree/django/django-tldap/django-tldap", "django-tldap")
            build_git_package("file:///home/brian/tree/django/django-placard/django-placard", "django-placard")
            build_git_package("file:///home/brian/tree/django/karaage/karaage", "karaage")
            build_git_package("file:///home/brian/tree/django/karaage/karaage-common", "karaage-common")
            build_git_package("file:///home/brian/tree/django/karaage/karaage-admin", "karaage-admin")
            build_git_package("file:///home/brian/tree/django/karaage/karaage-registration", "karaage-registration")

            with open('Packages', 'w') as f:
                call(["dpkg-scanpackages", "."], stdout=f)
        finally:
            os.chdir(old_dir)

        with open('/etc/apt/sources.list', 'w') as f:
            f.write("deb file://%s ./\n" % (tmp_dir))
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with open('/etc/apt/preferences', 'w') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 500\n")
            f.write("\n")

        allow_unauthenticated = True
    elif source == "github":
        old_dir = os.getcwd()
        try:
            os.chdir(tmp_dir)
            build_git_package("git://github.com/VPAC/django-tldap.git", "django-tldap")
            build_git_package("git://github.com/VPAC/django-placard.git", "django-placard")
            build_git_package("git://github.com/Karaage-Cluster/karaage.git", "karaage")
            build_git_package("git://github.com/Karaage-Cluster/karaage-common.git", "karaage-common")
            build_git_package("git://github.com/Karaage-Cluster/karaage-admin.git", "karaage-admin")
            build_git_package("git://github.com/Karaage-Cluster/karaage-registration.git", "karaage-registration")

            with open('Packages', 'w') as f:
                call(["dpkg-scanpackages", "."], stdout=f)
        finally:
            os.chdir(old_dir)

        with open('/etc/apt/sources.list', 'w') as f:
            f.write("deb file://%s ./\n" % (tmp_dir))
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with open('/etc/apt/preferences', 'w') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 500\n")
            f.write("\n")

        allow_unauthenticated = True
    elif source == "vpac":

        with open('/etc/apt/sources.list', 'w') as f:
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        allow_unauthenticated = False
    else:

        raise RuntimeError("Oops. Unknown source.")

    call(["apt-key", "add", "vpac/vpac-debian-key.gpg"])
    call(["apt-get", "update"])

    return allow_unauthenticated


def install_mysql():
    call(["apt-get", "install", "--yes", "mysql-server"])

    with open('mysql/setup.sql', 'r') as f:
        call(["mysql", "--password=mysqlsecret"], stdin=f)


def install_slapd():
    call(["apt-get", "install", "--yes", "slapd", "ldap-utils"])

    with open('slapd/ppolicy.ldif', 'r') as f:
        call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f)

    with open('slapd/ppolicy2.ldif', 'r') as f:
        call(["ldapadd", "-x", "-H", "ldapi:///", "-D", "cn=admin,dc=example,dc=org", "-w", "slapdsecret"], stdin=f)

    with open('slapd/ppolicy3.ldif', 'r') as f:
        call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f)


def install_karaage(allow_unauthenticated):
    args = []
    if allow_unauthenticated:
        args += ["--allow-unauthenticated"]

    call(["apt-get", "install", "--yes", "libjs-jquery-ui", "python-mysqldb"])
    call(["apt-get", "install", "--yes", "karaage"] + args)
    call(["apt-get", "install", "--yes", "karaage-admin", "karaage-registration"] + args)

    shutil.copyfile("karaage/global_settings.py", "/etc/karaage/global_settings.py")

    call(["kg_set_secret_key"])
    call(["kg-manage", "init_ldap"])
    call(["kg-manage", "syncdb", "--noinput"])
    call(["kg-manage", "migrate", "--all"])


def remove_karaage():
    call(["apt-get", "remove", "--purge", "--yes", "karaage-admin", "karaage-registration"])
    call(["apt-get", "autoremove", "--purge", "--yes" ])


def main():
    parser = argparse.ArgumentParser(description='Test karaage Debian packages.')
    parser.add_argument("-d", "--distribution", choices=['squeeze', 'wheezy'], default="wheezy", help="Which distribution?")
    parser.add_argument("-s", "--source", choices=['local', 'github', 'vpac'], default="github", help="Where to get packages from")
    parser.add_argument("-r", "--shell", action="store_true", help="Run shell on error")
    args = parser.parse_args()

    setup()
    tmp_dir = None
    try:
        tmp_dir = tempfile.mkdtemp()
        allow_unauthenticated = add_sources(tmp_dir, args.distribution, args.source)

        install_mysql()
        install_slapd()
        install_karaage(allow_unauthenticated)
        remove_karaage()

    except Exception, e:
        if args.shell:
            print "Exception occured"
            print e
            print "Entering shell, please exit to finish."
            call(["bash"])
        raise

    finally:
        try:
            if tmp_dir is not None:
                shutil.rmtree(tmp_dir) # delete directory
        except OSError, e:
            if e.errno != 2: # code 2 - no such file or directory
                raise

if __name__ == "__main__":
    main()
