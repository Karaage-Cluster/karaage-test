#!/usr/bin/env python
# Copyright 2013 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
import tempfile
import shutil
import os
import argparse
import schroot
import logging.config


env = {
        'PATH': '/usr/sbin:/usr/bin:/sbin:/bin',
        'DEBCONF_DEBUG': 'developer',
}


def setup(chroot, distribution):
    chroot.check_call(["apt-get", "install", "--yes", "eatmydata"], user='root')

    with chroot.create_file('/etc/apt/sources.list', user='root') as f:
        f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
        if distribution == "sid":
            distribution = "wheezy"
        f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with chroot.create_file('/etc/apt/preferences', user='root') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 510\n")
            f.write("\n")

    chroot.check_call(["apt-key", "add", "vpac/vpac-debian-key.gpg"], user='root')
    chroot.check_call(["eatmydata", "apt-get", "update"], user='root')
    chroot.check_call(["eatmydata", "apt-get", "upgrade", "--yes"], user='root')
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "git", "build-essential", "debhelper", "python", "python-sphinx", "python-django", "python-django-south", "python-setuptools"], user='root')
    chroot.check_call(["debconf-set-selections", "debconf.conf"], user='root')


def build_git_package(chroot, src, name, branch="master"):
    old_dir = os.getcwd()
    try:
        chroot.check_call(["git", "clone", "--branch", branch, src, name])
        os.chdir(name)
        chroot.check_call(["dpkg-checkbuilddeps"])
        chroot.check_call(["fakeroot", "debian/rules", "binary"])
    finally:
        os.chdir(old_dir)


def add_sources(chroot, tmp_dir, distribution, source):
    if source == "local":
        old_dir = os.getcwd()
        try:
            os.chdir(tmp_dir)
            build_git_package(chroot, "file:///home/brian/tree/django/django-tldap/django-tldap", "django-tldap")
            build_git_package(chroot, "file:///home/brian/tree/django/karaage/karaage", "karaage3")
            build_git_package(chroot, "file:///home/brian/tree/django/karaage/karaage-admin", "karaage3-admin")
            build_git_package(chroot, "file:///home/brian/tree/django/karaage/karaage-registration", "karaage3-registration")

            with open('Packages', 'w') as f:
                chroot.check_call(["dpkg-scanpackages", "."], stdout=f)
        finally:
            os.chdir(old_dir)

        with chroot.create_file('/etc/apt/sources.list', user='root') as f:
            f.write("deb file://%s ./\n" % (tmp_dir))
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            if distribution == "sid":
                distribution = "wheezy"
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with chroot.create_file('/etc/apt/preferences', user='root') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 510\n")
            f.write("\n")
            f.write("Package: *\n")
            f.write("Pin: origin ""\n")
            f.write("Pin-Priority: 520\n")
            f.write("\n")

        allow_unauthenticated = True
    elif source == "github":
        old_dir = os.getcwd()
        try:
            os.chdir(tmp_dir)
            build_git_package(chroot, "git://github.com/VPAC/django-tldap.git", "django-tldap")
            build_git_package(chroot, "git://github.com/Karaage-Cluster/karaage.git", "karaage")
            build_git_package(chroot, "git://github.com/Karaage-Cluster/karaage-common.git", "karaage-common")
            build_git_package(chroot, "git://github.com/Karaage-Cluster/karaage-admin.git", "karaage-admin")
            build_git_package(chroot, "git://github.com/Karaage-Cluster/karaage-registration.git", "karaage-registration")

            with open('Packages', 'w') as f:
                chroot.check_call(["dpkg-scanpackages", "."], stdout=f)
        finally:
            os.chdir(old_dir)

        with chroot.create_file('/etc/apt/sources.list', user='root') as f:
            f.write("deb file://%s ./\n" % (tmp_dir))
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            if distribution == "sid":
                distribution = "wheezy"
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with chroot.create_file('/etc/apt/preferences', user='root') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 510\n")
            f.write("\n")
            f.write("Package: *\n")
            f.write("Pin: origin ""\n")
            f.write("Pin-Priority: 520\n")
            f.write("\n")

        allow_unauthenticated = True
    elif source == "vpac":

        with chroot.create_file('/etc/apt/sources.list', user='root') as f:
            f.write("deb http://hq.in.vpac.org:9999/debian %s main\n" % distribution)
            if distribution == "sid":
                distribution = "wheezy"
            f.write("deb http://code.vpac.org/debian/ %s main\n" % distribution)

        with chroot.create_file('/etc/apt/preferences', user='root') as f:
            f.write("Package: *\n")
            f.write("Pin: release l=VPAC\n")
            f.write("Pin-Priority: 510\n")
            f.write("\n")

        allow_unauthenticated = False
    else:

        raise RuntimeError("Oops. Unknown source.")

    chroot.check_call(["eatmydata", "apt-get", "update"], user='root')

    return allow_unauthenticated


def install_mysql(chroot, sql_file, distribution):
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "mysql-server"], user='root')

    with chroot.create_file('/etc/mysql/conf.d/karaage.cnf', user='root') as f:
        f.write("[mysqld]\n")
        f.write("character_set_server = utf8\n")
        f.write("default-storage-engine = innodb\n")
        f.write("sql_mode = STRICT_ALL_TABLES\n")
#        f.write("innodb_log_buffer_size = 32M\n")
#        f.write("innodb_buffer_pool_size = 2G\n")
#        f.write("innodb_log_file_size = 768M\n")

        f.write("\n")
        f.write("[client]\n")
        f.write("default-character-set = utf8\n")

    chroot.check_call(["service", "mysql", "restart"], user='root')

    with open('mysql/setup.sql', 'r') as f:
        chroot.check_call(["mysql", "--user=root", "--password=mysqlsecret"], stdin=f)

    if sql_file is not None:
        with open(sql_file, 'r') as f:
            chroot.check_call(["mysql", "--user=root", "--password=mysqlsecret"], stdin=f)

    tables = chroot.check_output(["mysql", "-B", "-N", "-e", "SHOW TABLES", "-pmysqlsecret", "karaage"], user='root')
    for table in tables.split("\n"):
        if table == "":
            continue
        sql = "ALTER TABLE %s CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" % table
        chroot.check_call(["mysql", "-B", "-e", sql, "-pmysqlsecret", "karaage"], user='root')


def install_openldap(chroot, ldif_file):
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "slapd", "ldap-utils"], user='root')

    # load ppolicy schema
    with open('openldap/ppolicy.ldif', 'r') as f:
        chroot.check_call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f, user='root')

    # load ppolicy module
    with open('openldap/ppolicy1.ldif', 'r') as f:
        chroot.check_call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f, user='root')

    if ldif_file is None:

        # load default ppolicy policy
        with open('openldap/ppolicy2.ldif', 'r') as f:
            chroot.check_call(["ldapadd", "-x", "-H", "ldapi:///", "-D", "cn=admin,dc=example,dc=org", "-w", "slapdsecret"], stdin=f)

        # configure default ppolicy policy
        with open('openldap/ppolicy3.ldif', 'r') as f:
            chroot.check_call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f, user='root')

    else:

        # reconfigure base DN
        with open(ldif_file + '-config.ldif', 'r') as f:
            chroot.check_call(["ldapmodify", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f, user='root')

        # kill existing data
        chroot.check_call(["service", "slapd", "stop"], user='root')
        chroot.check_call(["rm", "-rf", "/var/lib/ldap/"], user='root')
        chroot.check_call(["mkdir", "/var/lib/ldap/"], user='root')
        with open('/dev/null', 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(["chown", "openldap:openldap", "-R", "/var/lib/ldap/"], user='root')
        chroot.check_call(["service", "slapd", "start"], user='root')

        # load default ppolicy policy
        chroot.check_call(["service", "slapd", "stop"], user='root')
        with open(ldif_file + '-ppolicy2.ldif', 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(["chown", "openldap:openldap", "-R", "/var/lib/ldap/"], user='root')
        chroot.check_call(["service", "slapd", "start"], user='root')

        # configure default ppolicy policy
        with open(ldif_file + '-ppolicy3.ldif', 'r') as f:
            chroot.check_call(["ldapadd", "-Y", "EXTERNAL", "-H", "ldapi:///"], stdin=f, user='root')

        # load VPAC data
        chroot.check_call(["service", "slapd", "stop"], user='root')
        with open(ldif_file + '.ldif', 'r') as f:
            chroot.check_call(["slapadd"], stdin=f, user='root')
        chroot.check_call(["slapindex"], user='root')
        chroot.check_call(["chown", "openldap:openldap", "-R", "/var/lib/ldap/"], user='root')
        chroot.check_call(["service", "slapd", "start"], user='root')

def install_389(chroot, ldif_file):
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "389-ds-base", "ldap-utils"], user='root')
    chroot.check_call(["setup-ds", "-s", "-f", "389/setup.inf"], user='root')
#    with open('389/app.ldif', 'r') as f:
#        chroot.check_call(["ldapmodify", "-D", "cn=Directory Manager", "-w", "slapsecret"], stdin=f, user='root')

def install_karaage(chroot, allow_unauthenticated):
    args = []
    if allow_unauthenticated:
        args += ["--allow-unauthenticated"]

    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "libjs-jquery-ui", "python-mysqldb"], user='root')
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "apache2", "libapache2-mod-wsgi" ], user='root')
#    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "karaage3"] + args, user='root')
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "karaage3-admin", "karaage3-registration"] + args, user='root')
    chroot.check_call(["eatmydata", "apt-get", "install", "--yes", "karaage3-celery"] + args, user='root')

def config_karaage(chroot, karaage_file, distribution):
    chroot.copy(karaage_file, "/etc/karaage/global_settings.py", user="root")
    chroot.check_call(["kg_set_secret_key"], user='root')
    chroot.check_call(["chmod", "a+r", "/etc/karaage/global_settings.py"], user='root')
    if distribution == 'sid':
        chroot.check_call(["ln", "-s", "/etc/karaage/kgadmin-apache.conf", "/etc/apache2/conf-available/"], user='root')
        chroot.check_call(["ln", "-s", "/etc/karaage/kgreg-apache.conf", "/etc/apache2/conf-available/"], user='root')
        chroot.check_call(["a2enconf", "kgadmin-apache"], user='root')
        chroot.check_call(["a2enconf", "kgreg-apache"], user='root')
    elif distribution == "squeeze" or distribution == "wheezy":
        chroot.check_call(["ln", "-s", "/etc/karaage/kgadmin-apache.conf", "/etc/apache2/conf.d/"], user='root')
        chroot.check_call(["ln", "-s", "/etc/karaage/kgreg-apache.conf", "/etc/apache2/conf.d/"], user='root')
    else:
        raise RuntimeError("Unknown distribution")

    chroot.check_call(["kg-manage", "syncdb", "--noinput"], user='root')
    chroot.check_call(["kg-manage", "migrate", "--all", "--traceback"], user='root')
    chroot.check_call(["sed", "-i", "s/^\(LDAP_PEOPLE *= *\).*$/\\1True/", "/etc/karaage/global_settings.py"], user='root')
    chroot.check_call(["kg-manage", "migrate_ldap", "--traceback"], user='root')

    chroot.check_call(["service", "apache2", "reload"], user='root')
    chroot.check_call(["service", "karaage3-celery", "restart"], user='root')
    chroot.check_call(["kg-manage", "kgcreatesuperuser",
        "--username=kgadmin", "--email=kgadmin@example.org", "--password=1234",
        "--short_name=karaage", "--full_name=admin", "--institute=test"],
        user='root')


def remove_karaage(chroot):
    chroot.check_call(["eatmydata", "apt-get", "remove", "--purge", "--yes", "karaage3"], user='root')
    chroot.check_call(["eatmydata", "apt-get", "autoremove", "--purge", "--yes" ], user='root')


def test_karaage(chroot, tmp_dir, args):
    setup(chroot, args.distribution)
    allow_unauthenticated = add_sources(chroot, tmp_dir, args.distribution, args.source)
    install_mysql(chroot, args.sql, args.distribution)
    if args.ldap == 'openldap':
        install_openldap(chroot, args.ldif)
        karaage_file = args.karaage or "openldap/global_settings.py"
    elif args.ldap == '389':
        install_389(chroot, args.ldif)
        karaage_file = args.karaage or "389/global_settings.py"
    else:
        raise RuntimeError("Unknown ldap server '%s'" % args.ldap)
    install_karaage(chroot, allow_unauthenticated)
    config_karaage(chroot, karaage_file, args.distribution)
    if args.shell:
        print("")
        print("Configured. tmp_dir=%s" % tmp_dir)
        print("Entering shell, please exit to finish.")
        chroot.check_call(["bash"], user='root')
    remove_karaage(chroot)


def main():
    logging.config.fileConfig("dotest.cfg")

    parser = argparse.ArgumentParser(description='Test karaage Debian packages.')
    parser.add_argument("-d", "--distribution", choices=['squeeze', 'wheezy', 'sid'], default="wheezy", help="Which distribution?")
    parser.add_argument("-l", "--ldap", choices=['openldap', '389'], default="openldap", help="Which LDAP server?")
    parser.add_argument("-s", "--source", choices=['local', 'github', 'vpac'], default="github", help="Where to get packages from")
    parser.add_argument("-r", "--shell", action="store_true", help="Run shell on configured")
    parser.add_argument("-e", "--error", action="store_true", help="Run shell on error")
    parser.add_argument("-S", "--sql", help="Initialise mysql with this sql file")
    parser.add_argument("-L", "--ldif", help="Initialise openldap with this file")
    parser.add_argument("-k", "--karaage", help="Karaage config file to use")
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG)

    tmp_dir = None
    try:
        tmp_dir = tempfile.mkdtemp()

        with schroot.schroot(args.distribution) as chroot:
            try:
                test_karaage(chroot, tmp_dir, args)
            except Exception, e:
                if args.error:
                    print("")
                    print("Exception occured. tmp_dir=%s" % tmp_dir)
                    print(e)
                    print("Entering shell, please exit to finish.")
                    chroot.check_call(["bash"], user='root')
                raise

    finally:
        try:
            if tmp_dir is not None:
                shutil.rmtree(tmp_dir) # delete directory
        except OSError, e:
            if e.errno != 2: # code 2 - no such file or directory
                raise

if __name__ == "__main__":
    main()
